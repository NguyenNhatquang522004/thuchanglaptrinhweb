@model nguyennhatquang_2280618967.Models.Product
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Update Product";
    var existingImages = ViewBag.ExistingImages as IEnumerable<nguyennhatquang_2280618967.Models.ProductImage>;
}

<h2>Update Product</h2>

<form asp-action="Update" method="post" enctype="multipart/form-data" id="productUpdateForm">
    <input type="hidden" asp-for="Id" />

    <div class="row">
        <div class="col-md-6">
            <!-- Product Information -->
            <div class="card">
                <div class="card-header">
                    <h5>Product Information</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label asp-for="Name"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Price"></label>
                        <input asp-for="Price" class="form-control" />
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Description"></label>
                        <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="CategoryId">Category</label>
                        <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-control">
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <!-- Image Management Section -->
            <div class="card">
                <div class="card-header">
                    <h5>Product Images</h5>
                </div>
                <div class="card-body">
                    <!-- Current Main Image -->
                    <div class="form-group mb-4">
                        <label>Main Product Image</label>
                        @if (!string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <div class="current-main-image mb-2">
                                <img src="@Model.ImageUrl" alt="Current main image"
                                     class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
                                <div class="mt-1">
                                    <small class="text-success">Current main image</small>
                                </div>
                            </div>
                        }

                        <div class="upload-area" id="mainImageUpload">
                            <div class="upload-content">
                                <i class="fas fa-cloud-upload-alt fa-2x text-muted"></i>
                                <p class="mt-2 mb-1">Click to upload new main image</p>
                                <small class="text-muted">Leave empty to keep current image</small>
                            </div>
                            <input type="file" name="imageUrl" accept="image/*" style="display: none;" />
                        </div>
                        <div id="mainImagePreview" class="mt-2"></div>
                    </div>

                    <!-- Existing Additional Images -->
                    @if (existingImages != null && existingImages.Any())
                    {
                        <div class="form-group mb-4">
                            <label>Current Additional Images</label>
                            <div class="existing-images-controls mb-2">
                                <button type="button" class="btn btn-outline-warning btn-sm" id="selectAllImagesBtn">
                                    <i class="fas fa-check-square"></i> Select All
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" id="deselectAllImagesBtn">
                                    <i class="fas fa-square"></i> Deselect All
                                </button>
                            </div>
                            <div class="row" id="existingImagesGrid">
                                @foreach (var image in existingImages)
                                {
                                    <div class="col-md-6 mb-3">
                                        <div class="card existing-image-card">
                                            <img src="@image.Url" class="card-img-top"
                                                 style="height: 120px; object-fit: cover;" alt="Product image" />
                                            <div class="card-body p-2">
                                                <div class="form-check">
                                                    <input type="checkbox" name="deleteImageIds"
                                                           value="@image.Id" class="form-check-input delete-checkbox"
                                                           id="delete_@image.Id" />
                                                    <label class="form-check-label text-danger"
                                                           for="delete_@image.Id">
                                                        <i class="fas fa-trash-alt"></i> Mark for deletion
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Add New Images -->
                    <div class="form-group">
                        <label>Add New Images</label>
                        <div class="upload-area" id="additionalImagesUpload">
                            <div class="upload-content">
                                <i class="fas fa-images fa-2x text-muted"></i>
                                <p class="mt-2 mb-1">Click to upload or drag and drop</p>
                                <small class="text-muted">Add unlimited new images</small>
                            </div>
                            <input type="file" multiple accept="image/*" style="display: none;" />
                        </div>

                        <div class="mt-2">
                            <button type="button" class="btn btn-outline-secondary btn-sm" id="addMoreImagesBtn">
                                <i class="fas fa-plus"></i> Add More Images
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm" id="clearNewImagesBtn">
                                <i class="fas fa-trash"></i> Clear New Images
                            </button>
                        </div>

                        <div id="newImagesPreview" class="mt-3">
                            <div id="newImageCounter" class="text-muted mb-2" style="display: none;">
                                <small>New images to add: <span id="newImageCount">0</span></small>
                            </div>
                            <div id="newImagesGrid" class="row"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Summary -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6>Update Summary</h6>
                </div>
                <div class="card-body">
                    <div id="updateSummary">
                        <div class="row text-center">
                            <div class="col-md-4">
                                <div class="summary-item">
                                    <i class="fas fa-image fa-2x text-primary"></i>
                                    <h6 class="mt-2">Main Image</h6>
                                    <span id="mainImageStatus" class="badge badge-secondary">No changes</span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="summary-item">
                                    <i class="fas fa-trash-alt fa-2x text-danger"></i>
                                    <h6 class="mt-2">Images to Delete</h6>
                                    <span id="deleteCount" class="badge badge-danger">0</span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="summary-item">
                                    <i class="fas fa-plus-circle fa-2x text-success"></i>
                                    <h6 class="mt-2">New Images</h6>
                                    <span id="newImagesCount" class="badge badge-success">0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Actions -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center">
                    <button type="submit" class="btn btn-primary btn-lg me-2">
                        <i class="fas fa-save"></i> Update Product
                    </button>
                    <a asp-action="Index" class="btn btn-secondary btn-lg">
                        <i class="fas fa-arrow-left"></i> Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden inputs for new additional images -->
    <div id="hiddenFileInputs"></div>
</form>

@section Styles {
    <style>
        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .upload-area:hover {
                border-color: #007bff;
                background-color: #f8f9fa;
            }

            .upload-area.dragover {
                border-color: #007bff;
                background-color: #e7f3ff;
            }

        .upload-content {
            pointer-events: none;
        }

        .existing-image-card {
            transition: all 0.3s ease;
        }

            .existing-image-card.marked-for-deletion {
                opacity: 0.5;
                border-color: #dc3545;
                transform: scale(0.95);
            }

        .image-preview-item {
            position: relative;
            margin-bottom: 15px;
        }

            .image-preview-item img {
                width: 100%;
                height: 120px;
                object-fit: cover;
                border-radius: 8px;
                border: 2px solid #dee2e6;
            }

        .image-remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
        }

            .image-remove-btn:hover {
                background: rgba(220, 53, 69, 1);
            }

        .summary-item {
            padding: 15px;
        }

        .badge {
            font-size: 0.9em;
            padding: 5px 10px;
        }

        .badge-secondary {
            background-color: #6c757d;
        }

        .badge-danger {
            background-color: #dc3545;
        }

        .badge-success {
            background-color: #28a745;
        }

        .badge-warning {
            background-color: #ffc107;
            color: #212529;
        }
    </style>
}

@section Scripts {
    <script>
        let newImages = [];
        let imageCounter = 0;

        document.addEventListener('DOMContentLoaded', function() {
            initializeImageUpload();
            initializeExistingImagesControls();
            updateSummary();
        });

        function initializeImageUpload() {
            // Main image upload
            const mainUploadArea = document.getElementById('mainImageUpload');
            const mainFileInput = mainUploadArea.querySelector('input[type="file"]');

            // Additional images upload
            const additionalUploadArea = document.getElementById('additionalImagesUpload');
            const additionalFileInput = additionalUploadArea.querySelector('input[type="file"]');

            // Event listeners for main image
            mainUploadArea.addEventListener('click', () => mainFileInput.click());
            mainUploadArea.addEventListener('dragover', handleDragOver);
            mainUploadArea.addEventListener('drop', (e) => handleDrop(e, 'main'));
            mainUploadArea.addEventListener('dragleave', handleDragLeave);
            mainFileInput.addEventListener('change', (e) => handleMainImageSelect(e));

            // Event listeners for additional images
            additionalUploadArea.addEventListener('click', () => additionalFileInput.click());
            additionalUploadArea.addEventListener('dragover', handleDragOver);
            additionalUploadArea.addEventListener('drop', (e) => handleDrop(e, 'additional'));
            additionalUploadArea.addEventListener('dragleave', handleDragLeave);
            additionalFileInput.addEventListener('change', (e) => handleAdditionalImagesSelect(e));

            // Button event listeners
            document.getElementById('addMoreImagesBtn').addEventListener('click', () => additionalFileInput.click());
            document.getElementById('clearNewImagesBtn').addEventListener('click', clearNewImages);
        }

        function initializeExistingImagesControls() {
            // Select/Deselect all buttons
            document.getElementById('selectAllImagesBtn')?.addEventListener('click', selectAllImages);
            document.getElementById('deselectAllImagesBtn')?.addEventListener('click', deselectAllImages);

            // Delete checkboxes
            const deleteCheckboxes = document.querySelectorAll('.delete-checkbox');
            deleteCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const card = this.closest('.existing-image-card');
                    if (this.checked) {
                        card.classList.add('marked-for-deletion');
                    } else {
                        card.classList.remove('marked-for-deletion');
                    }
                    updateSummary();
                });
            });
        }

        function selectAllImages() {
            const checkboxes = document.querySelectorAll('.delete-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
                checkbox.closest('.existing-image-card').classList.add('marked-for-deletion');
            });
            updateSummary();
        }

        function deselectAllImages() {
            const checkboxes = document.querySelectorAll('.delete-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = false;
                checkbox.closest('.existing-image-card').classList.remove('marked-for-deletion');
            });
            updateSummary();
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.stopPropagation();
            e.currentTarget.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.stopPropagation();
            e.currentTarget.classList.remove('dragover');
        }

        function handleDrop(e, type) {
            e.preventDefault();
            e.stopPropagation();
            e.currentTarget.classList.remove('dragover');

            const files = e.dataTransfer.files;
            if (files.length > 0) {
                if (type === 'main' && files.length === 1) {
                    handleMainImage(files[0]);
                } else if (type === 'additional') {
                    handleAdditionalImages(Array.from(files));
                }
            }
        }

        function handleMainImageSelect(e) {
            const file = e.target.files[0];
            if (file) {
                handleMainImage(file);
            }
        }

        function handleMainImage(file) {
            const preview = document.getElementById('mainImagePreview');
            preview.innerHTML = '';

            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.innerHTML = `
                        <div class="text-center">
                            <img src="${e.target.result}" class="img-thumbnail"
                                 style="max-width: 200px; max-height: 200px; border-color: #28a745;" alt="New main image" />
                            <div class="mt-2">
                                <small class="text-success"><i class="fas fa-check"></i> New main image: ${file.name}</small>
                            </div>
                        </div>
                    `;
                };
                reader.readAsDataURL(file);
                updateSummary();
            }
        }

        function handleAdditionalImagesSelect(e) {
            const files = Array.from(e.target.files);
            handleAdditionalImages(files);
            e.target.value = '';
        }

        function handleAdditionalImages(files) {
            files.forEach(file => {
                if (file && file.type.startsWith('image/')) {
                    const imageId = 'newimg_' + (++imageCounter);
                    newImages.push({
                        id: imageId,
                        file: file,
                        name: file.name
                    });

                    addNewImagePreview(file, imageId);
                    createHiddenFileInput(file, imageId);
                }
            });
            updateNewImageCounter();
            updateSummary();
        }

        function addNewImagePreview(file, imageId) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const imagesGrid = document.getElementById('newImagesGrid');
                const imageHtml = `
                    <div class="col-md-6 mb-3" id="newpreview_${imageId}">
                        <div class="image-preview-item">
                            <img src="${e.target.result}" alt="New image preview" />
                            <button type="button" class="image-remove-btn" onclick="removeNewImage('${imageId}')">
                                <i class="fas fa-times"></i>
                            </button>
                            <div class="mt-1">
                                <small class="text-success">${file.name}</small>
                            </div>
                        </div>
                    </div>
                `;
                imagesGrid.insertAdjacentHTML('beforeend', imageHtml);
            };
            reader.readAsDataURL(file);
        }

        function createHiddenFileInput(file, imageId) {
            const hiddenContainer = document.getElementById('hiddenFileInputs');
            const input = document.createElement('input');
            input.type = 'file';
            input.name = 'additionalImages';
            input.id = `hidden_${imageId}`;
            input.style.display = 'none';

            const dt = new DataTransfer();
            dt.items.add(file);
            input.files = dt.files;

            hiddenContainer.appendChild(input);
        }

        function removeNewImage(imageId) {
            // Remove from preview
            const previewElement = document.getElementById(`newpreview_${imageId}`);
            if (previewElement) {
                previewElement.remove();
            }

            // Remove from hidden inputs
            const hiddenInput = document.getElementById(`hidden_${imageId}`);
            if (hiddenInput) {
                hiddenInput.remove();
            }

            // Remove from newImages array
            newImages = newImages.filter(img => img.id !== imageId);

            updateNewImageCounter();
            updateSummary();
        }

        function clearNewImages() {
            if (newImages.length === 0) return;

            if (confirm('Are you sure you want to remove all new images?')) {
                document.getElementById('newImagesGrid').innerHTML = '';
                document.getElementById('hiddenFileInputs').innerHTML = '';
                newImages = [];
                updateNewImageCounter();
                updateSummary();
            }
        }

        function updateNewImageCounter() {
            const counter = document.getElementById('newImageCounter');
            const count = document.getElementById('newImageCount');

            if (newImages.length > 0) {
                counter.style.display = 'block';
                count.textContent = newImages.length;
            } else {
                counter.style.display = 'none';
            }
        }

        function updateSummary() {
            // Main image status
            const mainImageInput = document.querySelector('input[name="imageUrl"]');
            const mainImageStatus = document.getElementById('mainImageStatus');
            if (mainImageInput.files && mainImageInput.files[0]) {
                mainImageStatus.textContent = 'Will be updated';
                mainImageStatus.className = 'badge badge-warning';
            } else {
                mainImageStatus.textContent = 'No changes';
                mainImageStatus.className = 'badge badge-secondary';
            }

            // Delete count
            const deleteCheckboxes = document.querySelectorAll('.delete-checkbox:checked');
            const deleteCount = document.getElementById('deleteCount');
            deleteCount.textContent = deleteCheckboxes.length;
            deleteCount.className = deleteCheckboxes.length > 0 ? 'badge badge-danger' : 'badge badge-secondary';

            // New images count
            const newImagesCount = document.getElementById('newImagesCount');
            newImagesCount.textContent = newImages.length;
            newImagesCount.className = newImages.length > 0 ? 'badge badge-success' : 'badge badge-secondary';
        }

        // Form submission
        document.getElementById('productUpdateForm').addEventListener('submit', function(e) {
            const deleteCount = document.querySelectorAll('.delete-checkbox:checked').length;
            const newImagesCount = newImages.length;
            const mainImageChanged = document.querySelector('input[name="imageUrl"]').files.length > 0;

            if (deleteCount > 0 || newImagesCount > 0 || mainImageChanged) {
                let confirmMessage = 'You are about to:\n';
                if (mainImageChanged) confirmMessage += '- Update the main image\n';
                if (deleteCount > 0) confirmMessage += `- Delete ${deleteCount} existing image(s)\n`;
                if (newImagesCount > 0) confirmMessage += `- Add ${newImagesCount} new image(s)\n`;
                confirmMessage += '\nContinue with these changes?';

                if (!confirm(confirmMessage)) {
                    e.preventDefault();
                    return;
                }
            }

            // Show loading state
            const submitBtn = e.target.querySelector('button[type="submit"]');
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating Product...';
            submitBtn.disabled = true;
        });
    </script>
}